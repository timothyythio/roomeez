generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Household {
  id        String            @id @default(cuid())
  name      String
  createdAt DateTime          @default(now())
  members   HouseholdMember[]
  bills     Bill[]
}

model HouseholdMember {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  household   Household @relation(fields: [householdId], references: [id])
  householdId String
  role        String // e.g., "admin", "member"
}

model Bill {
  id          String        @id @default(cuid())
  title       String
  description String?
  category    BillCategory? @relation(fields: [categoryId], references: [id])
  categoryId  String?
  amount      Float

  paidBy   User   @relation("PaidBills", fields: [paidById], references: [id])
  paidById String

  household   Household @relation(fields: [householdId], references: [id])
  householdId String

  createdAt DateTime @default(now())
  isSettled Boolean  @default(false)

  billSplits BillSplit[]
}

model BillSplit {
  id     String @id @default(cuid())
  bill   Bill   @relation(fields: [billId], references: [id])
  billId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  amountOwed       Float
  hasPaid          Boolean @default(false) // Payer marks as paid
  paymentConfirmed Boolean @default(false) // Payee confirms payment
  note             String? // Optional message like "Paid via e-transfer"
}

model BillCategory {
  id          String  @id @default(cuid())
  name        String
  createdBy   User?   @relation(fields: [createdById], references: [id])
  createdById String?

  bills Bill[]
}

model User {
  id            String            @id @default(cuid())
  name          String
  email         String            @unique
  emailVerified DateTime?
  password      String?
  phoneNumber   String?
  role          String            @default("user")
  image         String? // for profile picture if using OAuth
  createdAt     DateTime          @default(now())
  households    HouseholdMember[]
  billsPaid     Bill[]            @relation("PaidBills")
  billSplits    BillSplit[]
  accounts      Account[]
  sessions      Session[]
  // // Optional for WebAuthn support
  // Authenticator Authenticator[]
  BillCategory  BillCategory[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
